## 服务器配置
server: 
  port: 8081

## spring配置
spring: 
  application:
    name: demo-app  # 应用的名称
    admin:
      enabled: true  # 启用远程管理spring应用  
  #http:
  #  log-request-details: false  #  记录请求的详细日志信息
  
  ## devtools
  devtools:
    #add-properties: false # 取消属性的默认设置
    restart:
      log-condition-evaluation-delta: false  # 禁用评估日志
      exclude: static/**,public/**   # 设置不需要重启服务的目录改动
      additional-paths: p/**  # 设置其他的路径改动后重启服务
      enabled: true  # 设置是否禁用重启
      #trigger-file: .reloadtrigger  # 指定文件发生变化后，才重启
      poll-interval: 2s # 设置间隔时间来监控文件系统的变化
      quiet-period: 1s
    livereload:
      enabled: true  # 资源发生改变后，触发浏览器的刷新
    remote:
      secret: 123456  # 远程调试密钥，需要受信任的https安全连接

  ## 
  # 关闭springboot启动时的日志信息
  # 如果需要在启动时额外的添加日志信息则重写SpringApplication类的logStartupInfo方法
  # 懒加载
  # also, SpringApplicationBuilder 的  lazyInitialization 方法 或者 SpringApplication 的 setLazyInitialization 方法
  # spring.main.
  main:
    log-startup-info: false
  #  lazy-initialization: true  
      
  ## profile
  profiles:
    active: dev

  ## datasouce配置
#  datasource: 
#    driver-class-name: dm.jdbc.driver.DmDriver
#    url: jdbc:dm://localhost:5236/DAMENG
#    username: RUYI
#    password: 1234567890
  datasource: 
    driver-class-name: oracle.jdbc.driver.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521:orcl
    username: system
    password: orcl
     
  ## ThymeLeaf 模板
  thymeleaf: 
    mode: HTML5  # 模板的模式，支持 HTML, XML TEXT JAVASCRIPT
    servlet:
      content-type: text/html  # 内容类别,可不用配置
    cache: false  # 开发配置为false,避免修改模板还要重启服务器
    prefix: classpath:/templates/  # 配置模板路径，默认是templates，可以不用配置
 
  ## web
  # 自定义web资源拦截目录
  #mvc:
  #  static-path-pattern: /resources/**
  
  ## 国际化配置???
  messages:
    basename: i18n/messages,i18n/messages_zh
    fallback-to-system-locale: false
    
  ## redis
  redis:
    host: 127.0.0.1
    port: 6379 #Redis服务器连接端口
    password: #Redis服务器连接密码（默认为空）
    timeout: 30000 #连接超时时间（毫秒）    jedis:      pool:        max-idle: 8 #连接池最大连接数（使用负值表示没有限制）        max-wait: -1 #连接池最大阻塞等待时间（使用负值表示没有限制）        min-idle: 0 #连接池中的最小空闲连接

  ## securtiy 默认用户名/密码
  security:
    user:
      name: ruyi
      password: ruyi
      roles: ADMIN

  ## kafka
  kafka:
    bootstrap-servers: 127.0.0.1:9092 # kafka集群
    consumer:
      auto-offset-reset: earliest  # 当kafka中没有初始offset或offset超出范围时将自动重置offset; 
                                   # earliest:重置为分区中最小的offset;
                                   # latest:重置为分区中最新的offset(消费分区中新产生的数据);
                                   # none:只要有一个分区不存在已提交的offset,就抛出异常;
      properties:
        group:
          id: defaultConsumerGroup  # 默认的消费组id
        session:
          timeout:
            ms: 120000   # 消费会话超时时间(超过这个时间consumer没有发送心跳，就会触发rebalance操作)
        request:
          timeout:
            ms: 180000   # 消费请求超时时间
      enable-auto-commit: true   # 是否自动提交offset
      auto-commit-interval: 1000  # 提交offset延时(即接收到消息多久后提交offset)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer  # kafka提供的反序列化类
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      missing-topics-fatal: false  # 消费端监听的topic不存在时，项目启动会报错

## mybatis 
mybatis: 
  mapper-locations: classpath:mapping/*Mapping.xml 

## 项目日志配置文件路径     
logging: 
  config: classpath:logback-spring.xml 
 
## eureka client  
eureka: 
  client: 
    serviceUrl: 
      defaultZone: http://localhost:8761/eureka/  # eureka server端口         eureka-server-read-timeout-seconds: 30 